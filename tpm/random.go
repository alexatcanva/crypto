package tpm

import (
	"context"
	"fmt"

	"github.com/google/go-tpm/tpm2"
)

type ShortRandomReadError struct {
	Requested int
	Generated int
}

func (s ShortRandomReadError) Error() string {
	return fmt.Sprintf("generated %d random bytes instead of the requested %d", s.Generated, s.Requested)
}

// GenerateRandom returns `size` number of random bytes generated by the TPM.
func (t *TPM) GenerateRandom(ctx context.Context, size uint16) (random []byte, err error) {
	if err = t.open(goTPMCall(ctx)); err != nil {
		return nil, fmt.Errorf("failed opening TPM: %w", err)
	}
	defer closeTPM(ctx, t, &err)

	random, err = tpm2.GetRandom(t.rwc, size)
	if err != nil {
		return nil, fmt.Errorf("failed generating random data: %w", err)
	}

	if len(random) != int(size) {
		return nil, ShortRandomReadError{Requested: int(size), Generated: len(random)}
	}

	return
}
